[build]
builder = "NIXPACKS"
buildCommand = "npm ci --only=production && npm run build"

[deploy]
numReplicas = 1
restartPolicyType = "ON_FAILURE"
restartPolicyMaxRetries = 10

# Production environment
[environments.production]
name = "production"

# Staging environment for testing
[environments.staging]
name = "staging"

# Server service configuration
[[services]]
name = "courtesy-inspection-api"
source = "server"

[services.healthcheck]
path = "/api/health"
port = 3000
initialDelaySeconds = 30
periodSeconds = 10
timeoutSeconds = 5
successThreshold = 1
failureThreshold = 3

[services.networking]
serviceDomain = "courtesy-inspection-api"

# Auto-scaling configuration
[services.autoscaling]
enabled = true
minReplicas = 1
maxReplicas = 3
targetCPUPercent = 70
targetMemoryPercent = 80

# Resource limits
[services.resources]
memory = "512Mi"
cpu = "250m"
ephemeralStorage = "2Gi"

# Environment-specific overrides
[services.environments.production]
[services.environments.production.resources]
memory = "1Gi"
cpu = "500m"
ephemeralStorage = "5Gi"

[services.environments.production.autoscaling]
minReplicas = 2
maxReplicas = 5

[services.environments.staging]
[services.environments.staging.resources]
memory = "256Mi"
cpu = "125m"

# Database configuration
[[services]]
name = "courtesy-inspection-db"
plugin = "postgresql"
plan = "hobby"

[services.environments.production]
plan = "pro"

# Redis cache (for sessions and rate limiting)
[[services]]
name = "courtesy-inspection-cache"
plugin = "redis"
plan = "hobby"

[services.environments.production]
plan = "pro"

# Static file storage
[[services]]
name = "courtesy-inspection-storage"
plugin = "railway-volumes"
mountPath = "/app/uploads"
size = "5GB"

[services.environments.production]
size = "20GB"

# Monitoring and logging
[observability]
enabled = true

[observability.logging]
level = "info"
format = "json"
retentionDays = 30

[observability.metrics]
enabled = true
port = 9090
path = "/metrics"

[observability.tracing]
enabled = true
samplingRate = 0.1

# Environment variables template
[environments.production.variables]
NODE_ENV = "production"
PORT = "3000"
LOG_LEVEL = "info"
CORS_ORIGIN = "https://app.courtesy-inspection.com"
JWT_EXPIRES_IN = "24h"
BCRYPT_ROUNDS = "12"
MAX_FILE_SIZE = "10485760"
MAX_FILES = "20"
RATE_LIMIT_WINDOW = "900000"
RATE_LIMIT_MAX = "100"
DB_POOL_MIN = "2"
DB_POOL_MAX = "20"
DB_CONNECTION_TIMEOUT = "10000"
DB_IDLE_TIMEOUT = "30000"
CACHE_TTL = "3600"
SESSION_SECRET = "${{ secrets.SESSION_SECRET }}"
JWT_SECRET = "${{ secrets.JWT_SECRET }}"
DATABASE_URL = "${{ POSTGRES.DATABASE_URL }}"
REDIS_URL = "${{ REDIS.REDIS_URL }}"
TELNYX_API_KEY = "${{ secrets.TELNYX_API_KEY }}"
TELNYX_PUBLIC_KEY = "${{ secrets.TELNYX_PUBLIC_KEY }}"
SENTRY_DSN = "${{ secrets.SENTRY_DSN }}"

[environments.staging.variables]
NODE_ENV = "staging"
PORT = "3000"
LOG_LEVEL = "debug"
CORS_ORIGIN = "https://staging.courtesy-inspection.com"
JWT_EXPIRES_IN = "1h"
BCRYPT_ROUNDS = "10"
DB_POOL_MIN = "1"
DB_POOL_MAX = "5"
RATE_LIMIT_MAX = "200"
DATABASE_URL = "${{ POSTGRES.DATABASE_URL }}"
REDIS_URL = "${{ REDIS.REDIS_URL }}"
TELNYX_API_KEY = "${{ secrets.TELNYX_API_KEY_STAGING }}"
SENTRY_DSN = "${{ secrets.SENTRY_DSN_STAGING }}"

# Deployment hooks
[hooks]

[hooks.preDeployment]
command = "npm run lint && npm run type-check && npm run test:unit"

[hooks.postDeployment]
command = "npm run db:migrate && npm run db:health"

[hooks.preRollback]
command = "npm run db:backup"

# Security configuration
[security]
allowedHosts = [
    "courtesy-inspection.com",
    "*.courtesy-inspection.com",
    "railway.app"
]

[security.headers]
contentSecurityPolicy = "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; connect-src 'self' https:; font-src 'self' data:; object-src 'none'; base-uri 'self'; form-action 'self';"
frameOptions = "DENY"
contentTypeOptions = "nosniff"
referrerPolicy = "strict-origin-when-cross-origin"
hsts = "max-age=31536000; includeSubDomains; preload"

# Rate limiting
[security.rateLimit]
windowMs = 900000  # 15 minutes
max = 100
message = "Too many requests from this IP"
standardHeaders = true
legacyHeaders = false

# CORS configuration
[security.cors]
origin = [
    "https://courtesy-inspection.com",
    "https://app.courtesy-inspection.com",
    "https://www.courtesy-inspection.com"
]
credentials = true
methods = ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
allowedHeaders = ["Content-Type", "Authorization", "X-Requested-With"]