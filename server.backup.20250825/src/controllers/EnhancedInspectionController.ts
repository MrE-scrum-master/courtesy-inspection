// Enhanced Inspection Controller - Comprehensive HTTP request handling
// Integrates with all inspection services and provides complete API endpoints
// Includes proper error handling, validation, and business logic orchestration

import { Request, Response } from 'express';
import { EnhancedInspectionService } from '../services/EnhancedInspectionService';
import { InspectionItemService } from '../services/InspectionItemService';
import { VoiceProcessingService } from '../services/VoiceProcessingService';
import { PhotoService } from '../services/PhotoService';
import { WorkflowService } from '../services/WorkflowService';
import {
  validateCreateInspection,
  validateUpdateInspection,
  validateCreateInspectionItem,
  validateUpdateInspectionItem,
  validateVoiceProcessing,
  validatePhotoUpload,
  validateInspectionQuery,
  validateWorkflowTransition,
  validateRequest,
  validateSecurityConstraints,
  sanitizeInput
} from '../validators/inspection.validators';

export class EnhancedInspectionController {
  private inspectionService: EnhancedInspectionService;
  private itemService: InspectionItemService;
  private voiceService: VoiceProcessingService;
  private photoService: PhotoService;
  private workflowService: WorkflowService;
  
  constructor(
    inspectionService: EnhancedInspectionService,
    itemService: InspectionItemService,
    voiceService: VoiceProcessingService,
    photoService: PhotoService,
    workflowService: WorkflowService
  ) {
    this.inspectionService = inspectionService;
    this.itemService = itemService;
    this.voiceService = voiceService;
    this.photoService = photoService;
    this.workflowService = workflowService;
  }
  
  // POST /api/inspections
  createInspection = async (req: Request, res: Response): Promise<void> => {
    try {
      // Security validation
      const security = validateSecurityConstraints(req, ['mechanic', 'shop_manager', 'admin']);
      if (!security.isValid) {
        res.status(401).json({ success: false, errors: security.errors });
        return;
      }
      
      const shopId = req.user!.shop_id;
      const data = sanitizeInput(req.body);
      
      const result = await this.inspectionService.createInspection(data, req.user!.id, shopId);
      
      if (result.success) {
        res.status(201).json({
          success: true,
          data: {
            inspection: result.inspection,
            summary: result.summary
          },
          message: 'Inspection created successfully'
        });
      } else {
        res.status(400).json({
          success: false,
          errors: result.errors
        });
      }
      
    } catch (error) {
      console.error('Create inspection error:', error);
      res.status(500).json({
        success: false,
        error: 'Failed to create inspection'
      });
    }
  };
  
  // GET /api/inspections/:id
  getInspection = async (req: Request, res: Response): Promise<void> => {
    try {
      const security = validateSecurityConstraints(req);
      if (!security.isValid) {
        res.status(401).json({ success: false, errors: security.errors });
        return;
      }
      
      const { id } = req.params;
      const { include_history } = req.query;
      const shopId = req.user!.shop_id;
      
      const inspection = await this.inspectionService.getInspectionById(
        id, 
        shopId, 
        include_history === 'true'
      );
      
      if (!inspection) {
        res.status(404).json({
          success: false,
          error: 'Inspection not found'
        });
        return;
      }
      
      res.json({
        success: true,
        data: inspection
      });
      
    } catch (error) {
      console.error('Get inspection error:', error);
      res.status(500).json({
        success: false,
        error: 'Failed to retrieve inspection'
      });
    }
  };
  
  // GET /api/inspections
  getInspections = async (req: Request, res: Response): Promise<void> => {
    try {
      const security = validateSecurityConstraints(req);
      if (!security.isValid) {
        res.status(401).json({ success: false, errors: security.errors });
        return;
      }
      
      const shopId = req.user!.shop_id;
      const filters = sanitizeInput(req.query);
      
      // Apply role-based filtering
      if (req.user!.role === 'mechanic') {
        filters.assignedTo = req.user!.id;\n      }\n      \n      const result = await this.inspectionService.getInspections(shopId, filters, {\n        page: parseInt(filters.page) || 1,\n        limit: parseInt(filters.limit) || 50,\n        sortBy: filters.sortBy || 'created_at',\n        sortOrder: filters.sortOrder || 'DESC'\n      });\n      \n      res.json({\n        success: true,\n        data: result.inspections,\n        pagination: {\n          total: result.total,\n          page: parseInt(filters.page) || 1,\n          limit: parseInt(filters.limit) || 50,\n          totalPages: Math.ceil(result.total / (parseInt(filters.limit) || 50))\n        }\n      });\n      \n    } catch (error) {\n      console.error('Get inspections error:', error);\n      res.status(500).json({\n        success: false,\n        error: 'Failed to retrieve inspections'\n      });\n    }\n  };\n  \n  // PUT /api/inspections/:id\n  updateInspection = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const security = validateSecurityConstraints(req, ['mechanic', 'shop_manager', 'admin']);\n      if (!security.isValid) {\n        res.status(401).json({ success: false, errors: security.errors });\n        return;\n      }\n      \n      const { id } = req.params;\n      const shopId = req.user!.shop_id;\n      const data = sanitizeInput(req.body);\n      const expectedVersion = req.headers['if-match'] ? parseInt(req.headers['if-match'] as string) : undefined;\n      \n      const result = await this.inspectionService.updateInspection(\n        id, data, req.user!.id, shopId, expectedVersion\n      );\n      \n      if (result.success) {\n        res.json({\n          success: true,\n          data: {\n            inspection: result.inspection,\n            summary: result.summary\n          },\n          warnings: result.warnings,\n          message: 'Inspection updated successfully'\n        });\n      } else {\n        const statusCode = result.errors?.includes('version conflict') ? 409 : 400;\n        res.status(statusCode).json({\n          success: false,\n          errors: result.errors\n        });\n      }\n      \n    } catch (error) {\n      console.error('Update inspection error:', error);\n      res.status(500).json({\n        success: false,\n        error: 'Failed to update inspection'\n      });\n    }\n  };\n  \n  // POST /api/inspections/:id/transition\n  transitionInspectionState = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const security = validateSecurityConstraints(req);\n      if (!security.isValid) {\n        res.status(401).json({ success: false, errors: security.errors });\n        return;\n      }\n      \n      const { id } = req.params;\n      const { toState, reason } = sanitizeInput(req.body);\n      const shopId = req.user!.shop_id;\n      \n      const result = await this.inspectionService.transitionInspectionState(\n        id, toState, req.user!.id, req.user!.role, shopId, reason\n      );\n      \n      if (result.success) {\n        res.json({\n          success: true,\n          data: result.inspection,\n          message: `Inspection transitioned to ${toState}`\n        });\n      } else {\n        res.status(400).json({\n          success: false,\n          errors: result.errors\n        });\n      }\n      \n    } catch (error) {\n      console.error('Transition inspection error:', error);\n      res.status(500).json({\n        success: false,\n        error: 'Failed to transition inspection state'\n      });\n    }\n  };\n  \n  // POST /api/inspections/:id/complete\n  completeInspection = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const security = validateSecurityConstraints(req, ['mechanic', 'shop_manager', 'admin']);\n      if (!security.isValid) {\n        res.status(401).json({ success: false, errors: security.errors });\n        return;\n      }\n      \n      const { id } = req.params;\n      const shopId = req.user!.shop_id;\n      \n      const result = await this.inspectionService.completeInspection(\n        id, req.user!.id, req.user!.role, shopId\n      );\n      \n      if (result.success) {\n        res.json({\n          success: true,\n          data: result.inspection,\n          message: 'Inspection completed successfully'\n        });\n      } else {\n        res.status(400).json({\n          success: false,\n          errors: result.errors\n        });\n      }\n      \n    } catch (error) {\n      console.error('Complete inspection error:', error);\n      res.status(500).json({\n        success: false,\n        error: 'Failed to complete inspection'\n      });\n    }\n  };\n  \n  // POST /api/inspections/:id/approve\n  approveInspection = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const security = validateSecurityConstraints(req, ['shop_manager', 'admin']);\n      if (!security.isValid) {\n        res.status(401).json({ success: false, errors: security.errors });\n        return;\n      }\n      \n      const { id } = req.params;\n      const shopId = req.user!.shop_id;\n      \n      const result = await this.inspectionService.approveInspection(id, req.user!.id, shopId);\n      \n      if (result.success) {\n        res.json({\n          success: true,\n          data: result.inspection,\n          message: 'Inspection approved successfully'\n        });\n      } else {\n        res.status(400).json({\n          success: false,\n          errors: result.errors\n        });\n      }\n      \n    } catch (error) {\n      console.error('Approve inspection error:', error);\n      res.status(500).json({\n        success: false,\n        error: 'Failed to approve inspection'\n      });\n    }\n  };\n  \n  // POST /api/inspections/:id/reject\n  rejectInspection = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const security = validateSecurityConstraints(req, ['shop_manager', 'admin']);\n      if (!security.isValid) {\n        res.status(401).json({ success: false, errors: security.errors });\n        return;\n      }\n      \n      const { id } = req.params;\n      const { reason } = sanitizeInput(req.body);\n      const shopId = req.user!.shop_id;\n      \n      const result = await this.inspectionService.rejectInspection(id, reason, req.user!.id, shopId);\n      \n      if (result.success) {\n        res.json({\n          success: true,\n          data: result.inspection,\n          message: 'Inspection rejected'\n        });\n      } else {\n        res.status(400).json({\n          success: false,\n          errors: result.errors\n        });\n      }\n      \n    } catch (error) {\n      console.error('Reject inspection error:', error);\n      res.status(500).json({\n        success: false,\n        error: 'Failed to reject inspection'\n      });\n    }\n  };\n  \n  // POST /api/inspections/:id/send-to-customer\n  sendToCustomer = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const security = validateSecurityConstraints(req, ['shop_manager', 'admin']);\n      if (!security.isValid) {\n        res.status(401).json({ success: false, errors: security.errors });\n        return;\n      }\n      \n      const { id } = req.params;\n      const shopId = req.user!.shop_id;\n      \n      const result = await this.inspectionService.sendToCustomer(id, req.user!.id, shopId);\n      \n      if (result.success) {\n        res.json({\n          success: true,\n          data: result.inspection,\n          message: 'Inspection sent to customer successfully'\n        });\n      } else {\n        res.status(400).json({\n          success: false,\n          errors: result.errors\n        });\n      }\n      \n    } catch (error) {\n      console.error('Send to customer error:', error);\n      res.status(500).json({\n        success: false,\n        error: 'Failed to send inspection to customer'\n      });\n    }\n  };\n  \n  // DELETE /api/inspections/:id\n  deleteInspection = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const security = validateSecurityConstraints(req, ['shop_manager', 'admin']);\n      if (!security.isValid) {\n        res.status(401).json({ success: false, errors: security.errors });\n        return;\n      }\n      \n      const { id } = req.params;\n      const shopId = req.user!.shop_id;\n      \n      const result = await this.inspectionService.deleteInspection(id, req.user!.id, shopId);\n      \n      if (result) {\n        res.json({\n          success: true,\n          message: 'Inspection deleted successfully'\n        });\n      } else {\n        res.status(400).json({\n          success: false,\n          error: 'Failed to delete inspection or inspection not found'\n        });\n      }\n      \n    } catch (error) {\n      console.error('Delete inspection error:', error);\n      res.status(500).json({\n        success: false,\n        error: error instanceof Error ? error.message : 'Failed to delete inspection'\n      });\n    }\n  };\n  \n  // GET /api/inspections/:id/summary\n  getInspectionSummary = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const security = validateSecurityConstraints(req);\n      if (!security.isValid) {\n        res.status(401).json({ success: false, errors: security.errors });\n        return;\n      }\n      \n      const { id } = req.params;\n      const shopId = req.user!.shop_id;\n      \n      const summary = await this.inspectionService.generateInspectionSummary(id, shopId);\n      \n      res.json({\n        success: true,\n        data: summary\n      });\n      \n    } catch (error) {\n      console.error('Get inspection summary error:', error);\n      res.status(500).json({\n        success: false,\n        error: 'Failed to generate inspection summary'\n      });\n    }\n  };\n  \n  // GET /api/inspections/dashboard/attention\n  getInspectionsRequiringAttention = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const security = validateSecurityConstraints(req);\n      if (!security.isValid) {\n        res.status(401).json({ success: false, errors: security.errors });\n        return;\n      }\n      \n      const shopId = req.user!.shop_id;\n      const inspections = await this.inspectionService.getInspectionsRequiringAttention(shopId);\n      \n      res.json({\n        success: true,\n        data: inspections\n      });\n      \n    } catch (error) {\n      console.error('Get inspections requiring attention error:', error);\n      res.status(500).json({\n        success: false,\n        error: 'Failed to retrieve inspections requiring attention'\n      });\n    }\n  };\n  \n  // GET /api/inspections/statistics\n  getInspectionStatistics = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const security = validateSecurityConstraints(req);\n      if (!security.isValid) {\n        res.status(401).json({ success: false, errors: security.errors });\n        return;\n      }\n      \n      const shopId = req.user!.shop_id;\n      const { date_from, date_to } = req.query;\n      \n      const dateFrom = date_from ? new Date(date_from as string) : undefined;\n      const dateTo = date_to ? new Date(date_to as string) : undefined;\n      \n      const statistics = await this.inspectionService.getInspectionStatistics(\n        shopId, dateFrom, dateTo\n      );\n      \n      res.json({\n        success: true,\n        data: statistics\n      });\n      \n    } catch (error) {\n      console.error('Get inspection statistics error:', error);\n      res.status(500).json({\n        success: false,\n        error: 'Failed to retrieve inspection statistics'\n      });\n    }\n  };\n  \n  // INSPECTION ITEMS ENDPOINTS\n  \n  // POST /api/inspections/:id/items\n  createInspectionItem = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const security = validateSecurityConstraints(req, ['mechanic', 'shop_manager', 'admin']);\n      if (!security.isValid) {\n        res.status(401).json({ success: false, errors: security.errors });\n        return;\n      }\n      \n      const { id } = req.params;\n      const shopId = req.user!.shop_id;\n      const data = sanitizeInput(req.body);\n      \n      const result = await this.itemService.createItem(id, data, req.user!.id, shopId);\n      \n      if (result.success) {\n        res.status(201).json({\n          success: true,\n          data: result.item,\n          message: 'Inspection item created successfully'\n        });\n      } else {\n        res.status(400).json({\n          success: false,\n          errors: result.errors\n        });\n      }\n      \n    } catch (error) {\n      console.error('Create inspection item error:', error);\n      res.status(500).json({\n        success: false,\n        error: 'Failed to create inspection item'\n      });\n    }\n  };\n  \n  // GET /api/inspections/:id/items\n  getInspectionItems = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const security = validateSecurityConstraints(req);\n      if (!security.isValid) {\n        res.status(401).json({ success: false, errors: security.errors });\n        return;\n      }\n      \n      const { id } = req.params;\n      const { include_details } = req.query;\n      const shopId = req.user!.shop_id;\n      \n      const items = await this.itemService.getInspectionItems(\n        id, shopId, include_details === 'true'\n      );\n      \n      res.json({\n        success: true,\n        data: items\n      });\n      \n    } catch (error) {\n      console.error('Get inspection items error:', error);\n      res.status(500).json({\n        success: false,\n        error: 'Failed to retrieve inspection items'\n      });\n    }\n  };\n  \n  // PUT /api/inspection-items/:itemId\n  updateInspectionItem = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const security = validateSecurityConstraints(req, ['mechanic', 'shop_manager', 'admin']);\n      if (!security.isValid) {\n        res.status(401).json({ success: false, errors: security.errors });\n        return;\n      }\n      \n      const { itemId } = req.params;\n      const shopId = req.user!.shop_id;\n      const data = sanitizeInput(req.body);\n      \n      const result = await this.itemService.updateItem(itemId, data, shopId);\n      \n      if (result.success) {\n        res.json({\n          success: true,\n          data: result.item,\n          warnings: result.warnings,\n          message: 'Inspection item updated successfully'\n        });\n      } else {\n        res.status(400).json({\n          success: false,\n          errors: result.errors\n        });\n      }\n      \n    } catch (error) {\n      console.error('Update inspection item error:', error);\n      res.status(500).json({\n        success: false,\n        error: 'Failed to update inspection item'\n      });\n    }\n  };\n  \n  // DELETE /api/inspection-items/:itemId\n  deleteInspectionItem = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const security = validateSecurityConstraints(req, ['mechanic', 'shop_manager', 'admin']);\n      if (!security.isValid) {\n        res.status(401).json({ success: false, errors: security.errors });\n        return;\n      }\n      \n      const { itemId } = req.params;\n      const shopId = req.user!.shop_id;\n      \n      const result = await this.itemService.deleteItem(itemId, shopId);\n      \n      if (result) {\n        res.json({\n          success: true,\n          message: 'Inspection item deleted successfully'\n        });\n      } else {\n        res.status(404).json({\n          success: false,\n          error: 'Inspection item not found'\n        });\n      }\n      \n    } catch (error) {\n      console.error('Delete inspection item error:', error);\n      res.status(500).json({\n        success: false,\n        error: 'Failed to delete inspection item'\n      });\n    }\n  };\n  \n  // POST /api/inspection-items/:itemId/voice-note\n  addVoiceNoteToItem = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const security = validateSecurityConstraints(req, ['mechanic', 'shop_manager', 'admin']);\n      if (!security.isValid) {\n        res.status(401).json({ success: false, errors: security.errors });\n        return;\n      }\n      \n      const { itemId } = req.params;\n      const { voiceText } = sanitizeInput(req.body);\n      const shopId = req.user!.shop_id;\n      \n      const result = await this.itemService.addVoiceNote(\n        itemId, voiceText, req.user!.id, shopId\n      );\n      \n      if (result.success) {\n        res.json({\n          success: true,\n          data: result.processedData,\n          message: 'Voice note added and processed successfully'\n        });\n      } else {\n        res.status(400).json({\n          success: false,\n          errors: result.errors\n        });\n      }\n      \n    } catch (error) {\n      console.error('Add voice note error:', error);\n      res.status(500).json({\n        success: false,\n        error: 'Failed to add voice note'\n      });\n    }\n  };\n  \n  // VOICE PROCESSING ENDPOINTS\n  \n  // POST /api/inspections/:id/voice/process\n  processVoiceInput = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const security = validateSecurityConstraints(req, ['mechanic', 'shop_manager', 'admin']);\n      if (!security.isValid) {\n        res.status(401).json({ success: false, errors: security.errors });\n        return;\n      }\n      \n      const { id } = req.params;\n      const shopId = req.user!.shop_id;\n      const data = sanitizeInput(req.body);\n      \n      const voiceRequest = {\n        inspectionId: id,\n        inspectionItemId: data.inspectionItemId,\n        originalText: data.originalText,\n        audioFilePath: data.audioFilePath,\n        audioDuration: data.audioDuration,\n        userId: req.user!.id,\n        shopId\n      };\n      \n      const result = await this.voiceService.processVoiceInput(voiceRequest);\n      \n      if (result.success) {\n        res.json({\n          success: true,\n          data: {\n            voiceNote: result.voiceNote,\n            parsedData: result.parsedData,\n            suggestions: result.suggestions\n          },\n          message: 'Voice input processed successfully'\n        });\n      } else {\n        res.status(400).json({\n          success: false,\n          errors: result.errors\n        });\n      }\n      \n    } catch (error) {\n      console.error('Process voice input error:', error);\n      res.status(500).json({\n        success: false,\n        error: 'Failed to process voice input'\n      });\n    }\n  };\n  \n  // GET /api/inspections/:id/voice/notes\n  getVoiceNotes = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const security = validateSecurityConstraints(req);\n      if (!security.isValid) {\n        res.status(401).json({ success: false, errors: security.errors });\n        return;\n      }\n      \n      const { id } = req.params;\n      const shopId = req.user!.shop_id;\n      \n      const voiceNotes = await this.voiceService.getVoiceNotes(id, shopId);\n      \n      res.json({\n        success: true,\n        data: voiceNotes\n      });\n      \n    } catch (error) {\n      console.error('Get voice notes error:', error);\n      res.status(500).json({\n        success: false,\n        error: 'Failed to retrieve voice notes'\n      });\n    }\n  };\n  \n  // PHOTO ENDPOINTS\n  \n  // POST /api/inspections/:id/photos\n  uploadPhoto = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const security = validateSecurityConstraints(req, ['mechanic', 'shop_manager', 'admin']);\n      if (!security.isValid) {\n        res.status(401).json({ success: false, errors: security.errors });\n        return;\n      }\n      \n      if (!req.file) {\n        res.status(400).json({\n          success: false,\n          error: 'No photo file provided'\n        });\n        return;\n      }\n      \n      const { id } = req.params;\n      const shopId = req.user!.shop_id;\n      const photoRequest = {\n        inspectionId: id,\n        inspectionItemId: req.body.inspectionItemId,\n        category: req.body.category,\n        description: req.body.description,\n        tags: req.body.tags ? JSON.parse(req.body.tags) : undefined,\n        processingOptions: req.body.processingOptions ? JSON.parse(req.body.processingOptions) : undefined\n      };\n      \n      const result = await this.photoService.uploadPhoto(\n        req.file, photoRequest, req.user!.id, shopId\n      );\n      \n      if (result.success) {\n        res.status(201).json({\n          success: true,\n          data: {\n            photo: result.photo,\n            processing: {\n              thumbnailPath: result.thumbnailPath,\n              compressedPath: result.compressedPath,\n              originalSize: result.originalSize,\n              processedSize: result.processedSize\n            }\n          },\n          message: 'Photo uploaded successfully'\n        });\n      } else {\n        res.status(400).json({\n          success: false,\n          errors: result.errors\n        });\n      }\n      \n    } catch (error) {\n      console.error('Upload photo error:', error);\n      res.status(500).json({\n        success: false,\n        error: 'Failed to upload photo'\n      });\n    }\n  };\n  \n  // GET /api/inspections/:id/photos\n  getInspectionPhotos = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const security = validateSecurityConstraints(req);\n      if (!security.isValid) {\n        res.status(401).json({ success: false, errors: security.errors });\n        return;\n      }\n      \n      const { id } = req.params;\n      const shopId = req.user!.shop_id;\n      \n      const photos = await this.photoService.getInspectionPhotos(id, shopId);\n      \n      res.json({\n        success: true,\n        data: photos\n      });\n      \n    } catch (error) {\n      console.error('Get inspection photos error:', error);\n      res.status(500).json({\n        success: false,\n        error: 'Failed to retrieve inspection photos'\n      });\n    }\n  };\n  \n  // DELETE /api/photos/:photoId\n  deletePhoto = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const security = validateSecurityConstraints(req, ['mechanic', 'shop_manager', 'admin']);\n      if (!security.isValid) {\n        res.status(401).json({ success: false, errors: security.errors });\n        return;\n      }\n      \n      const { photoId } = req.params;\n      const shopId = req.user!.shop_id;\n      \n      const result = await this.photoService.deletePhoto(photoId, shopId);\n      \n      if (result) {\n        res.json({\n          success: true,\n          message: 'Photo deleted successfully'\n        });\n      } else {\n        res.status(404).json({\n          success: false,\n          error: 'Photo not found'\n        });\n      }\n      \n    } catch (error) {\n      console.error('Delete photo error:', error);\n      res.status(500).json({\n        success: false,\n        error: 'Failed to delete photo'\n      });\n    }\n  };\n  \n  // WORKFLOW ENDPOINTS\n  \n  // GET /api/inspections/:id/workflow/history\n  getWorkflowHistory = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const security = validateSecurityConstraints(req);\n      if (!security.isValid) {\n        res.status(401).json({ success: false, errors: security.errors });\n        return;\n      }\n      \n      const { id } = req.params;\n      const shopId = req.user!.shop_id;\n      \n      const history = await this.workflowService.getWorkflowHistory(id, shopId);\n      \n      res.json({\n        success: true,\n        data: history\n      });\n      \n    } catch (error) {\n      console.error('Get workflow history error:', error);\n      res.status(500).json({\n        success: false,\n        error: 'Failed to retrieve workflow history'\n      });\n    }\n  };\n  \n  // GET /api/workflow/states/:state/inspections\n  getInspectionsByState = async (req: Request, res: Response): Promise<void> => {\n    try {\n      const security = validateSecurityConstraints(req);\n      if (!security.isValid) {\n        res.status(401).json({ success: false, errors: security.errors });\n        return;\n      }\n      \n      const { state } = req.params;\n      const { limit } = req.query;\n      const shopId = req.user!.shop_id;\n      \n      const inspections = await this.workflowService.getInspectionsByState(\n        shopId,\n        [state as any],\n        parseInt(limit as string) || 50\n      );\n      \n      res.json({\n        success: true,\n        data: inspections\n      });\n      \n    } catch (error) {\n      console.error('Get inspections by state error:', error);\n      res.status(500).json({\n        success: false,\n        error: 'Failed to retrieve inspections by state'\n      });\n    }\n  };\n}