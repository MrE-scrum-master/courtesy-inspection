# Courtesy Inspection MVP - Railway PostgreSQL Environment Variables
# Copy this file to .env and fill in your actual values

# ===========================================
# NODE.JS CONFIGURATION
# ===========================================
NODE_ENV=development
PORT=3000

# ===========================================
# UNIFIED DEPLOYMENT CONFIGURATION
# ===========================================
# Your custom domain (recommended) or Railway domain
# Examples: https://courtesyinspection.com or https://your-app-name.up.railway.app
PUBLIC_URL=https://your-domain.com

# Alternative: BASE_URL (legacy support)
BASE_URL=https://your-domain.com

# App-specific URLs (automatically derived from PUBLIC_URL if not set)
# Web app URL - where Expo Web is served
APP_URL=https://your-domain.com/app

# API base URL - for API endpoints
API_URL=https://your-domain.com/api

# Short links base URL - for SMS links
LINKS_URL=https://your-domain.com/l

# ===========================================
# RAILWAY POSTGRESQL CONFIGURATION
# ===========================================
# Railway automatically provides DATABASE_URL when you add PostgreSQL service
# Format: postgresql://username:password@host:port/database
DATABASE_URL=postgresql://postgres:password@host:5432/railway

# Database connection pool settings (optional)
DB_POOL_MAX=20
DB_IDLE_TIMEOUT=30000
DB_CONNECTION_TIMEOUT=2000

# ===========================================
# JWT AUTHENTICATION CONFIGURATION
# ===========================================
# Generate a secure random string (64+ characters)
# You can use: openssl rand -hex 64
JWT_SECRET=your-super-secure-jwt-secret-key-here-make-it-long-and-random

# Token expiration times
JWT_EXPIRES=24h
REFRESH_EXPIRES=7d

# ===========================================
# TWILIO CONFIGURATION (SMS Service)
# ===========================================
# Get these from your Twilio Console (https://console.twilio.com)

# Your Twilio Account SID
# Found in: Console Dashboard -> Account Info
TWILIO_ACCOUNT_SID=ACxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# Your Twilio Auth Token
# Found in: Console Dashboard -> Account Info -> Auth Token
TWILIO_AUTH_TOKEN=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# Your Twilio phone number (must be purchased from Twilio)
# Format: +1234567890
TWILIO_PHONE_NUMBER=+1234567890

# ===========================================
# FILE UPLOAD CONFIGURATION
# ===========================================
# Railway volume mount path for file storage
UPLOAD_DIR=/data/uploads

# Maximum file size in bytes (10MB default)
MAX_FILE_SIZE=10485760

# Allowed file types (comma-separated)
ALLOWED_FILE_TYPES=image/jpeg,image/jpg,image/png,image/webp

# ===========================================
# OPTIONAL: EMAIL CONFIGURATION
# ===========================================
# If you plan to add email functionality later

# SMTP configuration for sending emails
# SMTP_HOST=smtp.gmail.com
# SMTP_PORT=587
# SMTP_USER=your-email@gmail.com
# SMTP_PASS=your-app-password

# ===========================================
# SECURITY & ENCRYPTION
# ===========================================
# Random string for session encryption (generate a secure random string)
# SESSION_SECRET=your-super-secret-session-key-here

# ===========================================
# DEVELOPMENT & DEBUGGING
# ===========================================
# Set to 'true' to enable detailed logging
DEBUG=false

# Set to 'true' to enable CORS for all origins (development only)
CORS_ALLOW_ALL=false

# ===========================================
# RAILWAY DEPLOYMENT SETUP
# ===========================================
# Railway serves everything from ONE instance:
#   / → Landing page (public/landing.html)
#   /app → Expo Web build (web-build/ folder)
#   /api/* → REST API endpoints
#   /l/* → Short links for SMS
#
# Setup Steps:
# 1. Create Railway project: railway init
# 2. Add PostgreSQL: railway add postgresql
# 3. Create volume: railway volume create --name uploads --mount /data
# 4. Build Expo web: expo export --platform web
# 5. Copy web-build/ folder to your server directory
# 6. Set environment variables in Railway dashboard
# 7. Deploy: railway up

# ===========================================
# PRODUCTION DEPLOYMENT CHECKLIST
# ===========================================
# [ ] PostgreSQL service added to Railway project
# [ ] Volume created and mounted to /data
# [ ] All environment variables set in Railway dashboard
# [ ] JWT_SECRET generated with sufficient entropy
# [ ] Database schema deployed (run railway-schema.sql)
# [ ] File upload directory accessible
# [ ] Set PUBLIC_URL to your domain
# [ ] Ensure web-build/ folder is included in deployment
# [ ] Test all routes: /, /app, /api/health, /l/test
# [ ] Verify SMS links work with your domain
# [ ] Set up SSL certificate (automatic on Railway)
# [ ] Configure custom domain DNS (if using)

# ===========================================
# RAILWAY CLI COMMANDS
# ===========================================
# Install CLI: npm install -g @railway/cli
# Login: railway login
# Initialize project: railway init
# Add PostgreSQL: railway add postgresql
# Set variables: railway variables set KEY=value
# Create volume: railway volume create --name uploads --mount /data
# Deploy: railway up
# View logs: railway logs
# Connect to database: railway connect postgresql

# ===========================================
# GETTING STARTED CHECKLIST
# ===========================================
# Backend Services:
# [ ] Create Railway account and project
# [ ] Add PostgreSQL service (DATABASE_URL auto-generated)
# [ ] Create Twilio account and get credentials
# [ ] Purchase Twilio phone number
# [ ] Create volume for file uploads

# Local Development:
# [ ] Copy this file to .env
# [ ] Replace all example values with your actual credentials
# [ ] Install dependencies: npm install
# [ ] Build Expo web: expo export --platform web
# [ ] Test server locally: node templates/railway-server.js
# [ ] Verify routes work: http://localhost:3000/app

# Production Deployment:
# [ ] Set all environment variables in Railway
# [ ] Deploy to Railway: railway up
# [ ] Run database migration: railway run psql $DATABASE_URL < templates/railway-schema.sql
# [ ] Test unified deployment: domain.com, domain.com/app, domain.com/api/health
# [ ] Send test SMS with short link
# [ ] Verify all functionality end-to-end

# ===========================================
# SECURITY REMINDERS
# ===========================================
# - NEVER commit .env files to version control
# - Use different credentials for development/production
# - Generate strong JWT secrets (64+ characters)
# - Rotate keys regularly
# - Enable 2FA on all service accounts
# - Keep dependencies updated
# - Monitor logs for suspicious activity
# - Use HTTPS only in production (Railway provides this automatically)

# ===========================================
# COST OPTIMIZATION TIPS
# ===========================================
# - Use Railway shared PostgreSQL for development
# - Implement connection pooling (included in template)
# - Archive old inspection data to reduce database size
# - Optimize queries with proper indexes (included in schema)
# - Monitor resource usage via Railway dashboard
# - Consider database backup strategy for cost-effective data protection

# ===========================================
# MIGRATION TO SUPABASE (LATER)
# ===========================================
# If you decide to migrate to Supabase later:
# 1. See MIGRATION_TO_SUPABASE.md for detailed guide
# 2. Export data: pg_dump $DATABASE_URL > backup.sql
# 3. Create Supabase project and convert schema
# 4. Update code to use Supabase client
# 5. Migrate files to Supabase Storage
# 6. Test thoroughly before switching production

# ===========================================
# TROUBLESHOOTING
# ===========================================
# Database connection issues:
# - Check DATABASE_URL format and credentials
# - Verify PostgreSQL service is running
# - Test connection: railway run psql $DATABASE_URL

# File upload issues:
# - Verify volume is mounted: railway logs | grep volume
# - Check UPLOAD_DIR path exists
# - Confirm file permissions

# SMS not working:
# - Verify Twilio credentials
# - Check phone number format (+1234567890)
# - Test with simple message first

# Authentication problems:
# - Ensure JWT_SECRET is set and consistent
# - Check token expiration settings
# - Verify user exists in database

# For more help:
# - Railway docs: https://docs.railway.app
# - Railway Discord: https://discord.gg/railway
# - Twilio docs: https://www.twilio.com/docs